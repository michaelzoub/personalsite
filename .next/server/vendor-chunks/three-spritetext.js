"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-spritetext";
exports.ids = ["vendor-chunks/three-spritetext"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-spritetext/dist/three-spritetext.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/three-spritetext/dist/three-spritetext.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _default)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _assertThisInitialized(e) {\n  if (undefined === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e, _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || false, o.configurable = true, \"value\" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return _defineProperties(e.prototype, r), Object.defineProperty(e, \"prototype\", {\n    writable: false\n  }), e;\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: true,\n      configurable: true\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: false\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = true,\n      o = false;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = true, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (undefined !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (undefined !== e) {\n    var i = e.call(t, r);\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (String )(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;\n  }\n}\n\nvar three = typeof window !== 'undefined' && window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  CanvasTexture: three__WEBPACK_IMPORTED_MODULE_0__.CanvasTexture,\n  Sprite: three__WEBPACK_IMPORTED_MODULE_0__.Sprite,\n  SpriteMaterial: three__WEBPACK_IMPORTED_MODULE_0__.SpriteMaterial,\n  SRGBColorSpace: three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace\n};\nvar _default = /*#__PURE__*/function (_three$Sprite) {\n  function _default() {\n    var _this;\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var textHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgba(255, 255, 255, 1)';\n    _classCallCheck(this, _default);\n    _this = _callSuper(this, _default, [new three.SpriteMaterial()]);\n    _this._text = \"\".concat(text);\n    _this._textHeight = textHeight;\n    _this._color = color;\n    _this._backgroundColor = false; // no background color\n\n    _this._padding = 0;\n    _this._borderWidth = 0;\n    _this._borderRadius = 0;\n    _this._borderColor = 'white';\n    _this._strokeWidth = 0;\n    _this._strokeColor = 'white';\n    _this._fontFace = 'system-ui';\n    _this._fontSize = 90; // defines text resolution\n    _this._fontWeight = 'normal';\n    _this._canvas = document.createElement('canvas');\n    _this._genCanvas();\n    return _this;\n  }\n  _inherits(_default, _three$Sprite);\n  return _createClass(_default, [{\n    key: \"text\",\n    get: function get() {\n      return this._text;\n    },\n    set: function set(text) {\n      this._text = text;\n      this._genCanvas();\n    }\n  }, {\n    key: \"textHeight\",\n    get: function get() {\n      return this._textHeight;\n    },\n    set: function set(textHeight) {\n      this._textHeight = textHeight;\n      this._genCanvas();\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._color;\n    },\n    set: function set(color) {\n      this._color = color;\n      this._genCanvas();\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      return this._backgroundColor;\n    },\n    set: function set(color) {\n      this._backgroundColor = color;\n      this._genCanvas();\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this._padding;\n    },\n    set: function set(padding) {\n      this._padding = padding;\n      this._genCanvas();\n    }\n  }, {\n    key: \"borderWidth\",\n    get: function get() {\n      return this._borderWidth;\n    },\n    set: function set(borderWidth) {\n      this._borderWidth = borderWidth;\n      this._genCanvas();\n    }\n  }, {\n    key: \"borderRadius\",\n    get: function get() {\n      return this._borderRadius;\n    },\n    set: function set(borderRadius) {\n      this._borderRadius = borderRadius;\n      this._genCanvas();\n    }\n  }, {\n    key: \"borderColor\",\n    get: function get() {\n      return this._borderColor;\n    },\n    set: function set(borderColor) {\n      this._borderColor = borderColor;\n      this._genCanvas();\n    }\n  }, {\n    key: \"fontFace\",\n    get: function get() {\n      return this._fontFace;\n    },\n    set: function set(fontFace) {\n      this._fontFace = fontFace;\n      this._genCanvas();\n    }\n  }, {\n    key: \"fontSize\",\n    get: function get() {\n      return this._fontSize;\n    },\n    set: function set(fontSize) {\n      this._fontSize = fontSize;\n      this._genCanvas();\n    }\n  }, {\n    key: \"fontWeight\",\n    get: function get() {\n      return this._fontWeight;\n    },\n    set: function set(fontWeight) {\n      this._fontWeight = fontWeight;\n      this._genCanvas();\n    }\n  }, {\n    key: \"strokeWidth\",\n    get: function get() {\n      return this._strokeWidth;\n    },\n    set: function set(strokeWidth) {\n      this._strokeWidth = strokeWidth;\n      this._genCanvas();\n    }\n  }, {\n    key: \"strokeColor\",\n    get: function get() {\n      return this._strokeColor;\n    },\n    set: function set(strokeColor) {\n      this._strokeColor = strokeColor;\n      this._genCanvas();\n    }\n  }, {\n    key: \"_genCanvas\",\n    value: function _genCanvas() {\n      var _this2 = this;\n      var canvas = this._canvas;\n      var ctx = canvas.getContext('2d');\n      var relFactor = 1 / this.textHeight;\n      var border = Array.isArray(this.borderWidth) ? this.borderWidth : [this.borderWidth, this.borderWidth]; // x,y border\n      var relBorder = border.map(function (b) {\n        return b * _this2.fontSize * relFactor;\n      }); // border in canvas units\n\n      var borderRadius = Array.isArray(this.borderRadius) ? this.borderRadius : [this.borderRadius, this.borderRadius, this.borderRadius, this.borderRadius]; // tl tr br bl corners\n      var relBorderRadius = borderRadius.map(function (b) {\n        return b * _this2.fontSize * relFactor;\n      }); // border radius in canvas units\n\n      var padding = Array.isArray(this.padding) ? this.padding : [this.padding, this.padding]; // x,y padding\n      var relPadding = padding.map(function (p) {\n        return p * _this2.fontSize * relFactor;\n      }); // padding in canvas units\n\n      var lines = this.text.split('\\n');\n      var font = \"\".concat(this.fontWeight, \" \").concat(this.fontSize, \"px \").concat(this.fontFace);\n      ctx.font = font; // measure canvas with appropriate font\n      var innerWidth = Math.max.apply(Math, _toConsumableArray(lines.map(function (line) {\n        return ctx.measureText(line).width;\n      })));\n      var innerHeight = this.fontSize * lines.length;\n      canvas.width = innerWidth + relBorder[0] * 2 + relPadding[0] * 2;\n      canvas.height = innerHeight + relBorder[1] * 2 + relPadding[1] * 2;\n\n      // paint border\n      if (this.borderWidth) {\n        ctx.strokeStyle = this.borderColor;\n        if (relBorder[0]) {\n          // left + right borders\n          var hb = relBorder[0] / 2;\n          ctx.lineWidth = relBorder[0];\n          ctx.beginPath();\n          ctx.moveTo(hb, relBorderRadius[0]);\n          ctx.lineTo(hb, canvas.height - relBorderRadius[3]);\n          ctx.moveTo(canvas.width - hb, relBorderRadius[1]);\n          ctx.lineTo(canvas.width - hb, canvas.height - relBorderRadius[2]);\n          ctx.stroke();\n        }\n        if (relBorder[1]) {\n          // top + bottom borders\n          var _hb = relBorder[1] / 2;\n          ctx.lineWidth = relBorder[1];\n          ctx.beginPath();\n          ctx.moveTo(Math.max(relBorder[0], relBorderRadius[0]), _hb);\n          ctx.lineTo(canvas.width - Math.max(relBorder[0], relBorderRadius[1]), _hb);\n          ctx.moveTo(Math.max(relBorder[0], relBorderRadius[3]), canvas.height - _hb);\n          ctx.lineTo(canvas.width - Math.max(relBorder[0], relBorderRadius[2]), canvas.height - _hb);\n          ctx.stroke();\n        }\n        if (this.borderRadius) {\n          // strike rounded corners\n          var cornerWidth = Math.max.apply(Math, _toConsumableArray(relBorder));\n          var _hb2 = cornerWidth / 2;\n          ctx.lineWidth = cornerWidth;\n          ctx.beginPath();\n          [!!relBorderRadius[0] && [relBorderRadius[0], _hb2, _hb2, relBorderRadius[0]], !!relBorderRadius[1] && [canvas.width - relBorderRadius[1], canvas.width - _hb2, _hb2, relBorderRadius[1]], !!relBorderRadius[2] && [canvas.width - relBorderRadius[2], canvas.width - _hb2, canvas.height - _hb2, canvas.height - relBorderRadius[2]], !!relBorderRadius[3] && [relBorderRadius[3], _hb2, canvas.height - _hb2, canvas.height - relBorderRadius[3]]].filter(function (d) {\n            return d;\n          }).forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 4),\n              x0 = _ref2[0],\n              x1 = _ref2[1],\n              y0 = _ref2[2],\n              y1 = _ref2[3];\n            ctx.moveTo(x0, y0);\n            ctx.quadraticCurveTo(x1, y0, x1, y1);\n          });\n          ctx.stroke();\n        }\n      }\n\n      // paint background\n      if (this.backgroundColor) {\n        ctx.fillStyle = this.backgroundColor;\n        if (!this.borderRadius) {\n          ctx.fillRect(relBorder[0], relBorder[1], canvas.width - relBorder[0] * 2, canvas.height - relBorder[1] * 2);\n        } else {\n          // fill with rounded corners\n          ctx.beginPath();\n          ctx.moveTo(relBorder[0], relBorderRadius[0]);\n          [[relBorder[0], relBorderRadius[0], canvas.width - relBorderRadius[1], relBorder[1], relBorder[1], relBorder[1]],\n          // t\n          [canvas.width - relBorder[0], canvas.width - relBorder[0], canvas.width - relBorder[0], relBorder[1], relBorderRadius[1], canvas.height - relBorderRadius[2]],\n          // r\n          [canvas.width - relBorder[0], canvas.width - relBorderRadius[2], relBorderRadius[3], canvas.height - relBorder[1], canvas.height - relBorder[1], canvas.height - relBorder[1]],\n          // b\n          [relBorder[0], relBorder[0], relBorder[0], canvas.height - relBorder[1], canvas.height - relBorderRadius[3], relBorderRadius[0]] // t\n          ].forEach(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 6),\n              x0 = _ref4[0],\n              x1 = _ref4[1],\n              x2 = _ref4[2],\n              y0 = _ref4[3],\n              y1 = _ref4[4],\n              y2 = _ref4[5];\n            ctx.quadraticCurveTo(x0, y0, x1, y1);\n            ctx.lineTo(x2, y2);\n          });\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n      ctx.translate.apply(ctx, _toConsumableArray(relBorder));\n      ctx.translate.apply(ctx, _toConsumableArray(relPadding));\n\n      // paint text\n      ctx.font = font; // Set font again after canvas is resized, as context properties are reset\n      ctx.fillStyle = this.color;\n      ctx.textBaseline = 'bottom';\n      var drawTextStroke = this.strokeWidth > 0;\n      if (drawTextStroke) {\n        ctx.lineWidth = this.strokeWidth * this.fontSize / 10;\n        ctx.strokeStyle = this.strokeColor;\n      }\n      lines.forEach(function (line, index) {\n        var lineX = (innerWidth - ctx.measureText(line).width) / 2;\n        var lineY = (index + 1) * _this2.fontSize;\n        drawTextStroke && ctx.strokeText(line, lineX, lineY);\n        ctx.fillText(line, lineX, lineY);\n      });\n\n      // Inject canvas into sprite\n      if (this.material.map) this.material.map.dispose(); // gc previous texture\n      var texture = this.material.map = new three.CanvasTexture(canvas);\n      texture.colorSpace = three.SRGBColorSpace;\n      var yScale = this.textHeight * lines.length + border[1] * 2 + padding[1] * 2;\n      this.scale.set(yScale * canvas.width / canvas.height, yScale, 0);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.text, this.textHeight, this.color).copy(this);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      three.Sprite.prototype.copy.call(this, source);\n      this.color = source.color;\n      this.backgroundColor = source.backgroundColor;\n      this.padding = source.padding;\n      this.borderWidth = source.borderWidth;\n      this.borderColor = source.borderColor;\n      this.fontFace = source.fontFace;\n      this.fontSize = source.fontSize;\n      this.fontWeight = source.fontWeight;\n      this.strokeWidth = source.strokeWidth;\n      this.strokeColor = source.strokeColor;\n      return this;\n    }\n  }]);\n}(three.Sprite);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-spritetext/dist/three-spritetext.mjs\n");

/***/ })

};
;